class Solution {

public int helper(int[][] mat, int x1, int y1, int x2, int y2){
    
    int sum = 0;
    int minus = 0;
    
    sum = mat[x2][y2];
    
    if(y1-1 >= 0){
        minus = mat[x2][y1-1];
    }
    
    if(x1-1 >= 0){
        minus += mat[x1-1][y2];
    }
    
    if(y1-1 >= 0 && x1-1 >= 0){
        minus -= mat[x1-1][y1-1];
    }
    
    sum -= minus;
    
    return sum;
}

public int[][] matrixBlockSum(int[][] mat, int k) {
    
    int[][] ans = new int[mat.length][mat[0].length];
    
    for(int i = 0; i<mat.length; i++){
        int sum = 0;
        for(int j = 0; j<mat[0].length; j++){
            mat[i][j] += sum;
            sum = mat[i][j];
        }
    }
    
    for(int i = 0; i<mat[0].length; i++){
        int sum = 0;
        for(int j = 0; j<mat.length; j++){
            mat[j][i] += sum;
            sum = mat[j][i];
        }
    }
    
    for(int i = 0; i<mat.length; i++){
        for(int j = 0; j<mat[0].length; j++){
            
            int x1 = Math.max(0, i-k);
            int y1 = Math.max(0, j-k);
            
            int x2 = Math.min(mat.length-1, i+k);
            int y2 = Math.min(mat[0].length-1, j+k);
            
            ans[i][j] = helper(mat, x1, y1, x2, y2);
        }
    }
    
    return ans;
}
}

